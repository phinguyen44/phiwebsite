<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>statistics on Hi, I&#39;m Phi.</title>
    <link>/tags/statistics/</link>
    <description>Recent content in statistics on Hi, I&#39;m Phi.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/statistics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Working with Data Frames in Pandas, Part 2</title>
      <link>/blog/working-with-data-frames-in-pandas-part-2/</link>
      <pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/working-with-data-frames-in-pandas-part-2/</guid>
      <description>In part one of this series, I covered how to replicate much of the tidyverse functionality in Python and pandas. In this post, I&amp;rsquo;ll go over how to do basic plotting with matplotlib and seaborn, as those seem to be the two most commonly used Python plotting libraries. I&amp;rsquo;ll try to replicate plots that I can easily do in ggplot2, the graphics package in R.
I&amp;rsquo;m a big fan of ggplot2 in R because it creates a consistent &amp;ldquo;grammar&amp;rdquo; for which all graphics must adhere to.</description>
    </item>
    
    <item>
      <title>Working with Data Frames in Pandas, Part 1</title>
      <link>/blog/working-with-data-frames-in-pandas-part-1/</link>
      <pubDate>Mon, 09 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/working-with-data-frames-in-pandas-part-1/</guid>
      <description>In the past few months, I&amp;rsquo;ve been working on beefing up my data wrangling skills with Python and the pandas library. Coming primarily from an R background, I&amp;rsquo;m a huge advocate of the tidyverse family of packages (namely, dplyr for wrangling, tidyr for tidy data sets, and ggplot2 for plotting), from the great and powerful Hadley Wickham. For me, these packages heavily simplify data manipulation by providing a common &amp;ldquo;grammar&amp;rdquo; for which to operate on data, and for enabling method chaining using the pipe operator (%&amp;gt;%).</description>
    </item>
    
    <item>
      <title>Resampling Methods</title>
      <link>/blog/resampling-methods/</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/resampling-methods/</guid>
      <description>I once encountered an interview question that had completely bamboozled me at the time:
&amp;ldquo;Suppose you have a sequence \(X = {X_1, &amp;hellip;, X_N}\) of independently and identically distributed random variables drawn from the same unknown distribution. How would you estimate the variance of the sample median?&amp;rdquo;
In retrospect, the answer seems fairly obvious, but at the time I froze up. As a form of self-atonement, I wanted to answer this question in detail.</description>
    </item>
    
    <item>
      <title>Visualizing Decision Boundaries</title>
      <link>/blog/visualizing-decision-boundaries/</link>
      <pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/visualizing-decision-boundaries/</guid>
      <description>Note: I&amp;rsquo;m going to be doing a series of posts on interesting algorithms that I&amp;rsquo;ve either used in the past or intend to use in the future. Most of this stuff is fairly new to me or something I haven&amp;rsquo;t explored in depth, so please correct me if I am entirely off base. I fully believe that trying to explain a concept engenders a deeper understanding of said concept, so this is mostly a training tool for me!</description>
    </item>
    
  </channel>
</rss>